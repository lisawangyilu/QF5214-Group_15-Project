## Generate a dimension table with unique keywords
from sqlalchemy import create_engine, text
import pandas as pd

# Create a database connection engine
engine = create_engine('mysql+mysqlconnector://root:qf5214@localhost/mydatabase')
# Establish connection
connection = engine.connect()

try:
    # Fetch data from HOTCONCEPT and LATESTCONCEPT
    concepts_query = text("SELECT HOTCONCEPT, LATESTCONCEPT FROM ods_stock_inf;")
    concepts_data = connection.execute(concepts_query).fetchall()

    # Extract keywords and remove duplicates
    keywords_set = set()
    for hotconcept, latestconcept in concepts_data:
        if hotconcept:
            keywords_set.update(hotconcept.split(';'))  # Split keywords in HOTCONCEPT column
        if latestconcept:
            keywords_set.update([latestconcept])  # Assuming there is only one keyword in LATESTCONCEPT column

    # Convert keyword list to DataFrame
    keywords_df = pd.DataFrame(list(keywords_set), columns=['Keyword'])

    # Write data from DataFrame into new table
    keywords_df.to_sql('ods_unique_concepts', con=engine, if_exists='replace', index=False)
    print("New table 'ods_unique_keywords' with unique keywords has been created.")
except Exception as e:
    print("Error occurred while extracting and storing unique keywords:", e)
finally:
    # Close connection
    connection.close()

## Count keyword frequencies
from sqlalchemy import create_engine, text
import pandas as pd
# Create a database connection engine
engine = create_engine('mysql+mysqlconnector://root:qf5214@localhost/mydatabase')
# Establish connection
connection = engine.connect()

try:
    # Retrieve all unique keywords from the ods_unique_concepts table
    keywords_query = text("SELECT Keyword FROM ods_unique_concepts;")
    keywords_data = pd.read_sql(keywords_query, connection)
    # Retrieve all titles from the dwd_stock_sentiment_clean_di table
    titles_query = text("SELECT title FROM dwd_fund_sentiment_di;")
    titles_data = pd.read_sql(titles_query, connection)
    # Count occurrences of each keyword in titles
    keyword_counts = {keyword: titles_data['title'].str.contains(keyword, regex=False).sum() for keyword in keywords_data['Keyword']}
    # Convert the results into a DataFrame
    keyword_counts_df = pd.DataFrame(list(keyword_counts.items()), columns=['Keyword', 'Count'])
    # Store the results in a new table
    keyword_counts_df.to_sql('ads_fund_concepts_count_1m', con=engine, if_exists='replace', index=False)
    print("New table 'keyword_counts' with keyword frequencies has been created.")
except Exception as e:
    print("Error occurred while counting keyword frequencies:", e)
finally:
    # Close connection
    connection.close()

## Rename table
from sqlalchemy import create_engine, text
# Create a database connection engine
engine = create_engine('mysql+mysqlconnector://root:qf5214@localhost/mydatabase')
# Establish connection
connection = engine.connect()

try:
    # Use text function to process SQL command to rename tables
    rename_table_query = text("RENAME TABLE ads_concepts_count_1m TO ads_stock_concepts_count_1m;")
    rename_table_query = text("RENAME TABLE ads_concepts_count_1d TO ads_stock_concepts_count_1d;")
    # Execute the query to rename tables
    connection.execute(rename_table_query)
    print("Table 'keyword_counts' has been renamed to 'ads_concepts_count_1m'.")
except Exception as e:
    print("Error occurred while renaming the table:", e)
finally:
    # Close connection
    connection.close()

## Count keyword frequencies daily and present them by columns
from sqlalchemy import create_engine, text
import pandas as pd

# Create database connection engine
engine = create_engine('mysql+mysqlconnector://root:qf5214@localhost/mydatabase')
# Establish connection
connection = engine.connect()

try:
    # Retrieve all unique keywords from the ods_unique_concepts table
    keywords_query = text("SELECT Keyword FROM ods_unique_concepts;")
    keywords_data = pd.read_sql(keywords_query, connection)

    # Retrieve all titles and their update times from dwd_stock_sentiment_clean_di table
    titles_query = text("""
    SELECT title, DATE_FORMAT(update_time, '%Y-%m-%d') AS update_date 
    FROM dwd_fund_sentiment_di
    WHERE title IS NOT NULL AND update_time IS NOT NULL;
    """)
    titles_data = pd.read_sql(titles_query, connection)

    # Extract unique dates for column names
    unique_dates = sorted(titles_data['update_date'].unique())
    columns = ['Keyword'] + ['COUNT_' + date.replace('-', '_')

